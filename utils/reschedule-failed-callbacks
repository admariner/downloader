#!/usr/bin/env ruby
#
# Detects failed callbacks and re-schedules them.
#
# Usage:
#
#   Dry run:
#     reschedule-failed-callbacks
#
#   Reschedule:
#     reschedule-failed-callbacks --reschedule
#
require "redis"
require "net/http"
require "uri"

redis = Redis.new(host: ENV["REDIS"] || "localhost")
downloader = URI(ARGV[1] || "http://localhost")
dry_run = !(ARGV[0] == "--reschedule")

cursor = 0
failed_count = 0

Net::HTTP.start(downloader.host, downloader.port) do |http|
  loop do
    cursor, jobs = redis.scan(cursor, match: "job:*")

    jobs.each do |job_key|
      job = redis.hgetall(job_key)

      next if job["CallbackState"] != "Failed"

      if dry_run
        puts "Would reschedule callback for #{job_key}"
      else
        req = Net::HTTP::Post.new URI(downloader + "/retry/#{job['ID']}")
        res = http.request(req)
        if res.code == "204"
          puts "Re-scheduled callback for #{job_key}"
        else
          failed_count += 1
          puts "#{res.code}: #{res.body}"
        end
      end
    end

    break if cursor == "0"
  end
end
exit(failed_count)
